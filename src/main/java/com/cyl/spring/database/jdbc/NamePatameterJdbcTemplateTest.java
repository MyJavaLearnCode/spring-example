package com.cyl.spring.database.jdbc;

import org.junit.*;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import com.cyl.spring.database.jdbc.example.UserModel;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * NamedParameterJdbcTemplate基于jdbctemplate，支持命名参数特性；
 * 提供三类方法：execute、query、queryForXXX、update、BatchUpdate
 */
public class NamePatameterJdbcTemplateTest {
    private static JdbcTemplate jdbcTemplate;

    @BeforeClass
    public static void setUpClass() {
        String url = "jdbc:hsqldb:mem:test";
        String userName = "sa";
        String passWord = "";
        DriverManagerDataSource dataSource = new DriverManagerDataSource(url,userName,passWord);
        dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Before
    public void setUp() {
        String creatTableSql = "create memory table test " +
                "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(100))";
        jdbcTemplate.update(creatTableSql);
    }

    @After
    public void tearDown() {
        String dropTableSql = "drop table test";
        jdbcTemplate.update(dropTableSql);
    }
    @Test
    public void test1() {
        NamedParameterJdbcTemplate namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
        String insertSql = "insert into test(name) values(:name)";
        String selectSql = "select * from test where name=:name";
        String deleteSql = "delete from test where name=:name";
        Map<String, Object> paraMap = new HashMap<String,Object>();
        paraMap.put("name","name5");
        namedParameterJdbcTemplate.update(insertSql,paraMap);
        List<Integer> result = new ArrayList<Integer>();
        namedParameterJdbcTemplate.query(selectSql, paraMap, new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                result.add(rs.getInt("id"));
            }
        });
        Assert.assertEquals(1,result.size());
        SqlParameterSource parameterSource = new MapSqlParameterSource(paraMap);
        namedParameterJdbcTemplate.update(deleteSql, parameterSource);
    }

    @Test
    public void test2() {
        NamedParameterJdbcTemplate namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
        UserModel userModel = new UserModel();
        userModel.setMyName("name5");
        String insertSql = "insert into test(name) values(:myName)";
        SqlParameterSource sqlParameterSource = new BeanPropertySqlParameterSource(userModel);
        namedParameterJdbcTemplate.update(insertSql, sqlParameterSource);
    }
}
