package com.cyl.spring.database.jdbc.rdbmsOperation;

import org.junit.*;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.object.SqlFunction;
import org.springframework.jdbc.object.SqlQuery;
import org.springframework.jdbc.object.SqlUpdate;
import org.springframework.jdbc.object.StoredProcedure;
import com.cyl.spring.database.jdbc.UserModel;

import java.sql.Types;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 *
 *
 */
public class RdbmsOperationTest {
    private static JdbcTemplate jdbcTemplate;

    @BeforeClass
    public static void setUpClass() {
        String url = "jdbc:hsqldb:mem:test";
        String userName = "sa";
        String passWord = "";
        DriverManagerDataSource dataSource = new DriverManagerDataSource(url,userName,passWord);
        dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Before
    public void setUp() {
        String creatTableSql = "create memory table test " +
                "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(100))";
        jdbcTemplate.update(creatTableSql);

        String creatHsqldbFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str CHAR(100)) " +
                "RETURNS INT BEGIN ATOMIC RETURN length(str);END";
        jdbcTemplate.update(creatHsqldbFunctionSql);

        String creatHsqldbProcedureSql = "CREATE PROCEDURE PROCEDURE_TEST" +
                "(INOUT inOutName VARCHAR(100), OUT outId INT) " +
                "MODIFIES SQL DATA " +
                "BEGIN ATOMIC " +
                "  INSERT INTO test(name) VALUES (inOutName); " +
                "  SET outId = IDENTITY(); " +
                "  SET inOutName = 'Hello,' + inOutName; " +
                "END";
        jdbcTemplate.execute(creatHsqldbProcedureSql);
    }

    @After
    public void tearDown() {
        jdbcTemplate.execute("DROP FUNCTION FUNCTION_TEST");
        jdbcTemplate.execute("DROP PROCEDURE PROCEDURE_TEST");
        String dropTableSql = "DROP TABLE test";
        jdbcTemplate.update(dropTableSql);
    }


    /**
     *通过覆盖newRowMapper(Object[] parameters, Map<?, ?> context)定义一个RowMapper
     *
     * 提供两类方法：
     * 1、execute及executeByNamedParam：用于查询多行数据，其中executeByNamedParam用于参数名绑定
     * 2、findobject及findobjectByNamedParam：用于查询单行数据
     *
     * 使用步骤：
     * 1、setJdbcTemplate或setDataSource：设置数据源
     * 2、setSql：定义sql语句，都被编译成PreparedStatement
     * 3、declareParameter：描述参数类型
     * 4、compile：编译（可选）
     */
    @Test
    public void testSqlQuery() {
        SqlQuery query = new UserModelSqlQuery(jdbcTemplate);
        List<UserModel> resule = query.execute("name5");
        Assert.assertEquals(0,resule.size());
    }

    /**
     * mappingSqlQuery用于简化sqlquery中的rowMapper创建，可以直接实现mapRow(ResultSet rs, int rowNum)
     * 将行数据映射为需要的形式
     * mappingsqlQuery的所有查询方法完全继承SqlQuery
     */
    @Test
    public void testMappingSqlQuery() {
        jdbcTemplate.update("INSERT INTO test(name) VALUES ('name5')");
        SqlQuery<UserModel> sqlQuery = new UserModelMappingSqlQuery(jdbcTemplate);
        Map<String, Object> paramap = new HashMap<>();
        paramap.put("name", "name5");
        UserModel result = sqlQuery.findObjectByNamedParam(paramap);
        Assert.assertNotNull(result);
    }

    /**
     * sql函数包装器，用于支持返回单行结果集的查询
     */
    @Test
    public void testSqlFunction() {
        jdbcTemplate.update("INSERT INTO test(name) VALUES ('name5')");
        String countSql = "select count(*) from test";
        SqlFunction<Integer> sqlFunction1 = new SqlFunction<>(jdbcTemplate.getDataSource(),countSql);
        Assert.assertEquals(1,sqlFunction1.run());
        String selectSql = "select name from test where name=?";
        SqlFunction<String> sqlFunction2 = new SqlFunction<>(jdbcTemplate.getDataSource(), selectSql);
        sqlFunction2.declareParameter(new SqlParameter(Types.VARCHAR));
        String name = (String) sqlFunction2.runGeneric(new Object[]{"name5"});
        Assert.assertEquals("name5",name);
    }

    /**
     * sqlupdate用于支持数据库更新操作，提供update及updateByNamedParam
     */
    @Test
    public void testSqlUpdate() {
        SqlUpdate insert = new InsertUserModel(jdbcTemplate);
        insert.update("name5");

        String updateSql = "update test set name=? where name=?";
        SqlUpdate update = new SqlUpdate(jdbcTemplate.getDataSource(),updateSql,new int[]{Types.VARCHAR, Types.VARCHAR});
        update.update("name6","name5");

        String deleteSql = "delete from test WHERE name=:name";
        SqlUpdate delete = new SqlUpdate(jdbcTemplate.getDataSource(),deleteSql,new int[]{Types.VARCHAR});
        Map<String, Object> paraMap = new HashMap<>();
        paraMap.put("name", "name5");
        delete.updateByNamedParam(paraMap);
    }

    /**
     * execute用于支持存储过程及函数
     * */
    @Test
    public void testStoreProcedure() {
        StoredProcedure lengthFunction = new HsqldbLengthFunction(jdbcTemplate);
        Map<String, Object> outValues = lengthFunction.execute("test");
        Assert.assertEquals(4,outValues.get("result"));
    }

    @Test
    public void testStoredProcedure2() {
        StoredProcedure storedProcedure = new HsqldbTestProcedure(jdbcTemplate);
        Map<String, Object> outValue = storedProcedure.execute("test");
        System.out.println(outValue);
        Assert.assertEquals(0,outValue.get("outId"));
        Assert.assertEquals("Hello,test",outValue.get("inOutName"));
    }



}
