package com.cyl.spring.database.jdbc;

import org.junit.*;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

/**
 * 使用jdbcTemplate访问数据库
 *
 * jdbcTemplate主要提供五类方法：
 * 1、execute方法：可以用于执行任何sql语句，一般用于执行ddl语句
 * 2、update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate用于执行批处理相关语句；
 * 3、query方法及queryForXXX方法：用于执行查询相关语句；
 * 4、call方法：用于执行存储过程、函数相关语句；
 *
 *
 */
public class JdbcTemplateTest {
    private static JdbcTemplate jdbcTemplate;

    @BeforeClass
    public static void setUpClass() {
        String url = "jdbc:hsqldb:mem:test";
        String userName = "sa";
        String passWord = "";
        DriverManagerDataSource dataSource = new DriverManagerDataSource(url,userName,passWord);
        dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Before
    public void setUp() {
        String creatTableSql = "create memory table test " +
                "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(100))";
        jdbcTemplate.update(creatTableSql);
    }

    @After
    public void tearDown() {
        String dropTableSql = "drop table test";
        jdbcTemplate.update(dropTableSql);
    }


    @Test
    public void test() {
        String sql = "select * from INFORMATION_SCHEMA.SYSTEM_TABLES";
        jdbcTemplate.query(sql, new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                String value = rs.getString("TABLE_NAME");
                System.out.println("Column TABLENAME:" + value);
            }
        });
    }

    @Test
    public void testCURD() {
        insert();
        delete();
        update();
        select();
    }

    private void select() {
        jdbcTemplate.query("SELECT * FROM test", new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                System.out.println("id:" + rs.getInt("id"));
                System.out.println("name" + rs.getString("name"));
            }
        });
    }

    private void update() {
        jdbcTemplate.update("UPDATE test SET name='name3' WHERE NAME=?", new Object[]{"name1"});
        List<Map<String, Object>> queryForList = jdbcTemplate.queryForList("SELECT * FROM test WHERE name='name3'");
        Assert.assertEquals(1, queryForList.size());
    }

    private void delete() {
        jdbcTemplate.update("DELETE FROM test WHERE name = ?", new Object[]{"name2"});
        List<Map<String, Object>> queryForList = jdbcTemplate.queryForList("SELECT * FROM test");
        System.out.println(queryForList);
        Assert.assertEquals(1, queryForList.size());
    }

    private void insert() {
        jdbcTemplate.update("INSERT INTO test(name) VALUES('name1')");
        jdbcTemplate.update("INSERT INTO test(name) VALUES('name2')");
        List<Map<String, Object>> queryForList = jdbcTemplate.queryForList("SELECT * FROM test");
        System.out.println(queryForList);
        Assert.assertEquals(2, queryForList.size());
    }


}
