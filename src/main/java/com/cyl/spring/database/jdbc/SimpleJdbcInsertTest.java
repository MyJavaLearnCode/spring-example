package com.cyl.spring.database.jdbc;

import org.junit.*;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.SqlReturnResultSet;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.HashMap;
import java.util.Map;

/**
 * simpleJdbcInsert用于插入数据，用于简化操作
 * 提供三类防范：
 * 1、execute用于普通插入
 * 2、executeAndReturnKey及executeAndReturnKeyHolder用于插入时获取主键
 * 3、executeBatch用于批处理
 */
public class SimpleJdbcInsertTest {

    private static JdbcTemplate jdbcTemplate;

    @BeforeClass
    public static void setUpClass() {
        String url = "jdbc:hsqldb:mem:test";
        String userName = "sa";
        String passWord = "";
        DriverManagerDataSource dataSource = new DriverManagerDataSource(url, userName, passWord);
        dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Before
    public void setUp() {
        String creatTableSql = "CREATE MEMORY TABLE test " +
                "(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(100))";
        jdbcTemplate.update(creatTableSql);

        String creatHsqldbFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str CHAR(100)) " +
                "RETURNS INT BEGIN ATOMIC RETURN length(str);END";
        jdbcTemplate.update(creatHsqldbFunctionSql);

        String creatHsqldbProcedureSql = "CREATE PROCEDURE PROCEDURE_TEST" +
                "(INOUT inOutName VARCHAR(100), OUT outId INT) " +
                "MODIFIES SQL DATA " +
                "BEGIN ATOMIC " +
                "  INSERT INTO test(name) VALUES (inOutName); " +
                "  SET outId = IDENTITY(); " +
                "  SET inOutName = 'Hello,' + inOutName; " +
                "END";
        jdbcTemplate.execute(creatHsqldbProcedureSql);
    }

    @After
    public void tearDown() {
        jdbcTemplate.execute("DROP FUNCTION FUNCTION_TEST");
        jdbcTemplate.execute("DROP PROCEDURE PROCEDURE_TEST");
        String dropTableSql = "DROP TABLE test";
        jdbcTemplate.update(dropTableSql);
    }
    @Test
    public void testSimpleJdbcInsert() {
        SimpleJdbcInsert insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        Map<String, Object> args = new HashMap<>();
        args.put("name", "name5");
        insert.compile();
        //1.普通插入
        insert.execute(args);
        Assert.assertEquals(1,jdbcTemplate.queryForList("SELECT count(*) from test").get(0).get("C1"));
        //2、插入时获取主键值
        insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        insert.setGeneratedKeyName("id");
        Number id = insert.executeAndReturnKey(args);
        Assert.assertEquals(1,id);
        //3、批处理
        insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        insert.setGeneratedKeyName("id");
        int[] updateCount = insert.executeBatch(new Map[]{args,args,args});
        Assert.assertEquals(1,updateCount[0]);
        Assert.assertEquals(5,jdbcTemplate.queryForList("SELECT count(*) FROM test"));
    }

    @Test
    public void testSimpleJdbcCall1() {
        SimpleJdbcCall call = new SimpleJdbcCall(jdbcTemplate);
        call.withProcedureName("FUNCTION_TEST");
        call.declareParameters(new SqlReturnResultSet("result", new ResultSetExtractor<Integer>() {
            @Override
            public Integer extractData(ResultSet rs) throws SQLException, DataAccessException {
                while (rs.next()) {
                    return rs.getInt(1);
                }
                return 0;
            }
        }));
        call.declareParameters(new SqlParameter("str", Types.VARBINARY));
        Map<String, Object> outValues = call.execute("test");
        Assert.assertEquals(4,outValues.get("result"));
    }
}
