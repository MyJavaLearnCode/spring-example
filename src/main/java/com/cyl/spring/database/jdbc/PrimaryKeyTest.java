package com.cyl.spring.database.jdbc;

import org.junit.*;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.object.SqlUpdate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * 许多数据库提供自动生成主键的能力，jdbc3。0标准支持获取自动生成的主键，且必须数据库支持自动生成键获取；
 三种获取方式：
 1、jdbcTemplate
 2、SqlUpdate
 3、SimpleJdbcInsert
 */
public class PrimaryKeyTest {
    private static JdbcTemplate jdbcTemplate;

    @BeforeClass
    public static void setUpClass() {
        String url = "jdbc:hsqldb:mem:test";
        String userName = "sa";
        String passWord = "";
        DriverManagerDataSource dataSource = new DriverManagerDataSource(url, userName, passWord);
        dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Before
    public void setUp() {
        String creatTableSql = "CREATE MEMORY TABLE test " +
                "(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(100))";
        jdbcTemplate.update(creatTableSql);

        String creatHsqldbFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str CHAR(100)) " +
                "RETURNS INT BEGIN ATOMIC RETURN length(str);END";
        jdbcTemplate.update(creatHsqldbFunctionSql);

        String creatHsqldbProcedureSql = "CREATE PROCEDURE PROCEDURE_TEST" +
                "(INOUT inOutName VARCHAR(100), OUT outId INT) " +
                "MODIFIES SQL DATA " +
                "BEGIN ATOMIC " +
                "  INSERT INTO test(name) VALUES (inOutName); " +
                "  SET outId = IDENTITY(); " +
                "  SET inOutName = 'Hello,' + inOutName; " +
                "END";
        jdbcTemplate.execute(creatHsqldbProcedureSql);
    }

    @After
    public void tearDown() {
        jdbcTemplate.execute("DROP FUNCTION FUNCTION_TEST");
        jdbcTemplate.execute("DROP PROCEDURE PROCEDURE_TEST");
        String dropTableSql = "DROP TABLE test";
        jdbcTemplate.update(dropTableSql);
    }

    @Test
    public void testFetchKeyByJdbcTemplate() {
        String insertSql = "insert into test(name) values('name5')";
        KeyHolder generatedKeyHolder = new GeneratedKeyHolder();
        jdbcTemplate.update(new PreparedStatementCreator() {
            @Override
            public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                return con.prepareStatement(insertSql,new String[]{"id"});
            }
        },generatedKeyHolder);
        Assert.assertEquals(0,generatedKeyHolder.getKey());
    }

    @Test
    public void testFetchKeyBySqlUpdate() {
        String insertSql = "insert into test(name) values('name5')";
        KeyHolder generatedKeyHolder = new GeneratedKeyHolder();
        SqlUpdate update = new SqlUpdate();
        update.setJdbcTemplate(jdbcTemplate);
//        update.setGeneratedKeysColumnNames(new String[]{"id"});
        update.setReturnGeneratedKeys(true);
        update.setSql(insertSql);
        update.update(null, generatedKeyHolder);
        Assert.assertEquals(0,generatedKeyHolder.getKey());

    }
}
