package com.cyl.spring.database.tx.practice;

import org.junit.Assert;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jdbc.core.JdbcTemplate;
import com.cyl.spring.database.tx.practice.model.AddressModel;
import com.cyl.spring.database.tx.practice.model.UserModel;
import com.cyl.spring.database.tx.practice.service.IAddressService;
import com.cyl.spring.database.tx.practice.service.IUserService;

import javax.sql.DataSource;

public class TransactionTest {
    private static final String CREATE_USER_TABLE_SQL = "create table user" +
            "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "name varchar(100))";
    private static final String DROP_USER_TABLE = "drop table user";
    private static final String CREAT_ADDRESS_TABLE_SQL = "create table address" +
            "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "province varchar(100), city varchar(100), street varchar(100), user_id int)";
    private static final String DROP_ADDRESS_SQL = "DROP TABLE address";

    @Test
    public void testServiceTransaction() {
        String[] configLocations = {
                "spring/jdbc/example/application-resources.xml",
                "spring/tx/practice/dao/application-jdbc.xml",
                "spring/tx/practice/service/application-service.xml"
        };

        ApplicationContext context = new ClassPathXmlApplicationContext(configLocations);
        DataSource dataSource = context.getBean(DataSource.class);
        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
        jdbcTemplate.update(CREATE_USER_TABLE_SQL);
        jdbcTemplate.update(CREAT_ADDRESS_TABLE_SQL);

        IUserService userService = context.getBean("userService", IUserService.class);
        IAddressService addressService = context.getBean("addressService", IAddressService.class);

        UserModel userModel = creatDefauleUserModel();

        try {
            userService.save(userModel);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertEquals(0,userService.countAll());
        Assert.assertEquals(0,addressService.countAll());

        jdbcTemplate.update(DROP_USER_TABLE);
        jdbcTemplate.update(DROP_ADDRESS_SQL);
    }

    @Test
    public void testConfigTransaction() {
        String[] configLocations = {
                "spring/jdbc/example/application-resources.xml",
                "spring/tx/practice/dao/application-jdbc.xml",
                "spring/tx/txbyconfig/application-service.xml"
        };

        ApplicationContext context = new ClassPathXmlApplicationContext(configLocations);
        DataSource dataSource = context.getBean(DataSource.class);
        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
        jdbcTemplate.update(CREATE_USER_TABLE_SQL);
        jdbcTemplate.update(CREAT_ADDRESS_TABLE_SQL);

        IUserService userService = context.getBean("proxyUserService", IUserService.class);
        IAddressService addressService = context.getBean("proxyAddresssService", IAddressService.class);

        UserModel userModel = creatDefauleUserModel();

        try {
            userService.save(userModel);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertEquals(0,userService.countAll());
        Assert.assertEquals(0,addressService.countAll());

        jdbcTemplate.update(DROP_USER_TABLE);
        jdbcTemplate.update(DROP_ADDRESS_SQL);
    }

    @Test
    public void testDeclareTransaction() {
        String[] configLocations = {
                "spring/jdbc/example/application-resources.xml",
                "spring/tx/practice/dao/application-jdbc.xml",
                "spring/tx/txbyconfig/application-service-declare.xml"
        };

        ApplicationContext context = new ClassPathXmlApplicationContext(configLocations);
        DataSource dataSource = context.getBean(DataSource.class);
        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
        jdbcTemplate.update(CREATE_USER_TABLE_SQL);
        jdbcTemplate.update(CREAT_ADDRESS_TABLE_SQL);

        IUserService userService = context.getBean("userService", IUserService.class);
        IAddressService addressService = context.getBean("addressService", IAddressService.class);

        UserModel userModel = creatDefauleUserModel();

        try {
            userService.save(userModel);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertEquals(0,userService.countAll());
        Assert.assertEquals(0,addressService.countAll());

        jdbcTemplate.update(DROP_USER_TABLE);
        jdbcTemplate.update(DROP_ADDRESS_SQL);
    }

    @Test
    public void testAnnotationTransaction() {
        String[] configLocations = {
                "spring/jdbc/example/application-resources.xml",
                "spring/tx/practice/dao/application-jdbc.xml",
                "spring/tx/txbyconfig/application-service-annotation.xml"
        };

        ApplicationContext context = new ClassPathXmlApplicationContext(configLocations);
        DataSource dataSource = context.getBean(DataSource.class);
        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
        jdbcTemplate.update(CREATE_USER_TABLE_SQL);
        jdbcTemplate.update(CREAT_ADDRESS_TABLE_SQL);

        IUserService userService = context.getBean("userService", IUserService.class);
        IAddressService addressService = context.getBean("addressService", IAddressService.class);

        UserModel userModel = creatDefauleUserModel();

        try {
            userService.save(userModel);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertEquals(0,userService.countAll());
        Assert.assertEquals(0,addressService.countAll());

        jdbcTemplate.update(DROP_USER_TABLE);
        jdbcTemplate.update(DROP_ADDRESS_SQL);
    }

    private UserModel creatDefauleUserModel() {
        UserModel userModel = new UserModel();
        userModel.setName("test");
        AddressModel address = new AddressModel();
        address.setProvince("beijing");
        address.setCity("beijing");
        address.setStreet("haidian");
        userModel.setAddressModel(address);
        return userModel;
    }
}
